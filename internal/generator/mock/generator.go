// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hjblom/fuse/internal/generator (interfaces: Interface,ModuleGenerator,PackageGenerator)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/hjblom/fuse/internal/config"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockInterface) Generate(arg0 *config.Module) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockInterfaceMockRecorder) Generate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockInterface)(nil).Generate), arg0)
}

// MockModuleGenerator is a mock of ModuleGenerator interface.
type MockModuleGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockModuleGeneratorMockRecorder
}

// MockModuleGeneratorMockRecorder is the mock recorder for MockModuleGenerator.
type MockModuleGeneratorMockRecorder struct {
	mock *MockModuleGenerator
}

// NewMockModuleGenerator creates a new mock instance.
func NewMockModuleGenerator(ctrl *gomock.Controller) *MockModuleGenerator {
	mock := &MockModuleGenerator{ctrl: ctrl}
	mock.recorder = &MockModuleGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModuleGenerator) EXPECT() *MockModuleGeneratorMockRecorder {
	return m.recorder
}

// Description mocks base method.
func (m *MockModuleGenerator) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockModuleGeneratorMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockModuleGenerator)(nil).Description))
}

// Generate mocks base method.
func (m *MockModuleGenerator) Generate(arg0 *config.Module) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockModuleGeneratorMockRecorder) Generate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockModuleGenerator)(nil).Generate), arg0)
}

// Name mocks base method.
func (m *MockModuleGenerator) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockModuleGeneratorMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockModuleGenerator)(nil).Name))
}

// Plugins mocks base method.
func (m *MockModuleGenerator) Plugins() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Plugins")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Plugins indicates an expected call of Plugins.
func (mr *MockModuleGeneratorMockRecorder) Plugins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plugins", reflect.TypeOf((*MockModuleGenerator)(nil).Plugins))
}

// MockPackageGenerator is a mock of PackageGenerator interface.
type MockPackageGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockPackageGeneratorMockRecorder
}

// MockPackageGeneratorMockRecorder is the mock recorder for MockPackageGenerator.
type MockPackageGeneratorMockRecorder struct {
	mock *MockPackageGenerator
}

// NewMockPackageGenerator creates a new mock instance.
func NewMockPackageGenerator(ctrl *gomock.Controller) *MockPackageGenerator {
	mock := &MockPackageGenerator{ctrl: ctrl}
	mock.recorder = &MockPackageGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageGenerator) EXPECT() *MockPackageGeneratorMockRecorder {
	return m.recorder
}

// Description mocks base method.
func (m *MockPackageGenerator) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockPackageGeneratorMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockPackageGenerator)(nil).Description))
}

// Generate mocks base method.
func (m *MockPackageGenerator) Generate(arg0 *config.Module, arg1 *config.Package) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockPackageGeneratorMockRecorder) Generate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockPackageGenerator)(nil).Generate), arg0, arg1)
}

// Name mocks base method.
func (m *MockPackageGenerator) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPackageGeneratorMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPackageGenerator)(nil).Name))
}

// Plugins mocks base method.
func (m *MockPackageGenerator) Plugins() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Plugins")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Plugins indicates an expected call of Plugins.
func (mr *MockPackageGeneratorMockRecorder) Plugins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plugins", reflect.TypeOf((*MockPackageGenerator)(nil).Plugins))
}
