package modules

import (
	"fmt"
	"text/template"

	"github.com/hjblom/fuse/internal/config"
	"github.com/hjblom/fuse/internal/util"
)

var MainGenerator = &mainGenerator{file: util.File}

type mainGenerator struct {
	file util.FileReadWriter
}

func (g *mainGenerator) Name() string {
	return "Main Generator"
}

func (g *mainGenerator) Description() string {
	return "Generate the main.go file."
}

func (g *mainGenerator) Plugins() map[string]string {
	return map[string]string{}
}

var mainTemplate = `// Code generated by fuse. DO NOT EDIT.
package main

import (
	"os"

	"{{ .Path }}/internal"
)

func main() {
	// Load configuration
	config, err := internal.LoadConfig()
	if err != nil {
		os.Exit(1)
	}

	// Logging
	internal.ConfigureLogging(config.LogLevel)

	// Fuse services
	services, err := internal.Setup(config)
	if err != nil {
		panic(err)
	}

	// Start runtime
	rt := internal.NewRuntime(services)
	err = rt.Start()
	if err != nil {
		panic(err)
	}
}
`

func (g *mainGenerator) Generate(mod *config.Module) error {
	path := "cmd/main.go"

	// Check if file exists
	if g.file.Exists(path) {
		return nil
	}

	// Ensure directory exists
	err := g.file.Mkdir("cmd")
	if err != nil {
		return fmt.Errorf("failed to create cmd directory: %w", err)
	}

	// File
	f, err := g.file.Create(path)
	if err != nil {
		return fmt.Errorf("failed to create main file: %w", err)
	}

	// Template
	t, err := template.New("main").Parse(mainTemplate)
	if err != nil {
		return fmt.Errorf("failed to parse main template: %w", err)
	}
	err = t.ExecuteTemplate(f, "main", mod)
	if err != nil {
		return fmt.Errorf("failed to write main file: %w", err)
	}

	return nil
}
